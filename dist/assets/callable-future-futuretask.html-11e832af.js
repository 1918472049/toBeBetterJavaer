const e=JSON.parse('{"key":"v-62fb9cf0","path":"/thread/callable-future-futuretask.html","title":"聊聊可以返回结果的创建线程的三个关键类：Callable、Future和FutureTask","lang":"zh-CN","frontmatter":{"title":"聊聊可以返回结果的创建线程的三个关键类：Callable、Future和FutureTask","shortTitle":"Callable、Future和FutureTask","author":"Matrix海子","category":["博客园"],"description":"14.2 Callable、Future 和 FutureTask 在前面的文章中我们讲述了创建线程的 3 种方式，一种是直接继承 Thread，一种就是实现 Runnable 接口，另外一种是 实现Callable 接口。 前 2 种方式都有一个缺陷就是：在执行完任务之后无法获取执行结果。 如果需要获取执行结果，就必须通过共享变量或者使用线程通信的方式来达到效果，这样使用起来就比较麻烦。","head":[["meta",{"property":"og:url","content":"https://tobebetterjavaer.com/thread/callable-future-futuretask.html"}],["meta",{"property":"og:site_name","content":"Java程序员进阶之路"}],["meta",{"property":"og:title","content":"聊聊可以返回结果的创建线程的三个关键类：Callable、Future和FutureTask"}],["meta",{"property":"og:description","content":"14.2 Callable、Future 和 FutureTask 在前面的文章中我们讲述了创建线程的 3 种方式，一种是直接继承 Thread，一种就是实现 Runnable 接口，另外一种是 实现Callable 接口。 前 2 种方式都有一个缺陷就是：在执行完任务之后无法获取执行结果。 如果需要获取执行结果，就必须通过共享变量或者使用线程通信的方式来达到效果，这样使用起来就比较麻烦。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-24T02:39:04.000Z"}],["meta",{"property":"article:author","content":"Matrix海子"}],["meta",{"property":"article:modified_time","content":"2023-04-24T02:39:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"聊聊可以返回结果的创建线程的三个关键类：Callable、Future和FutureTask\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-24T02:39:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Matrix海子\\"}]}"]]},"headers":[{"level":3,"title":"一.Callable 与 Runnable","slug":"一-callable-与-runnable","link":"#一-callable-与-runnable","children":[]},{"level":3,"title":"二.Future","slug":"二-future","link":"#二-future","children":[]},{"level":3,"title":"三.FutureTask","slug":"三-futuretask","link":"#三-futuretask","children":[]},{"level":2,"title":"四.使用示例","slug":"四-使用示例","link":"#四-使用示例","children":[]}],"git":{"createdTime":1680851018000,"updatedTime":1682303944000,"contributors":[{"name":"itwanger","email":"www.qing_gee@163.com","commits":2},{"name":"沉默王二","email":"www.qing_gee@163.com","commits":2}]},"readingTime":{"minutes":5.68,"words":1703},"filePathRelative":"thread/callable-future-futuretask.md","localizedDate":"2023年4月7日","excerpt":"<h1> 14.2 Callable、Future 和 FutureTask</h1>\\n<p><a href=\\"https://tobebetterjavaer.com/thread/wangzhe-thread.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">在前面的文章中</a>我们讲述了创建线程的 3 种方式，一种是直接继承 Thread，一种就是实现 Runnable 接口，另外一种是 实现Callable 接口。</p>\\n<p>前 2 种方式都有一个缺陷就是：在执行完任务之后无法获取执行结果。</p>\\n<p>如果需要获取执行结果，就必须通过共享变量或者使用线程通信的方式来达到效果，这样使用起来就比较麻烦。</p>","autoDesc":true}');export{e as data};
