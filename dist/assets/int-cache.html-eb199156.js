const e=JSON.parse('{"key":"v-3516d6cc","path":"/basic-extra-meal/int-cache.html","title":"聊聊Java基本数据类型缓存池","lang":"zh-CN","frontmatter":{"title":"聊聊Java基本数据类型缓存池","shortTitle":"Java基本数据类型缓存池","category":["Java核心"],"tag":["Java重要知识点"],"description":"Java程序员进阶之路，小白的零基础Java教程，从入门到进阶，Java基本数据类型缓存池","head":[["meta",{"name":"keywords","content":"Java,Java SE,Java基础,Java教程,Java程序员进阶之路,Java入门,教程,Integer,java数据类型缓存池,java IntegerCache,Java 基本数据类型缓存池"}],["meta",{"property":"og:url","content":"https://tobebetterjavaer.com/basic-extra-meal/int-cache.html"}],["meta",{"property":"og:site_name","content":"Java进阶之路"}],["meta",{"property":"og:title","content":"聊聊Java基本数据类型缓存池"}],["meta",{"property":"og:description","content":"Java程序员进阶之路，小白的零基础Java教程，从入门到进阶，Java基本数据类型缓存池"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-02T08:25:43.000Z"}],["meta",{"property":"article:tag","content":"Java重要知识点"}],["meta",{"property":"article:modified_time","content":"2023-03-02T08:25:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"聊聊Java基本数据类型缓存池\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-02T08:25:43.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1634887330000,"updatedTime":1677745543000,"contributors":[{"name":"itwanger","email":"www.qing_gee@163.com","commits":10},{"name":"leoshine","email":"71440988+leo220yuyaodog@users.noreply.github.com","commits":1},{"name":"沉默王二","email":"www.qing_gee@163.com","commits":1}]},"readingTime":{"minutes":5.54,"words":1663},"filePathRelative":"basic-extra-meal/int-cache.md","localizedDate":"2021年10月22日","excerpt":"<h1> 3.5 基本数据类型缓存池</h1>\\n<p>“三妹，今天我们来补一个小的知识点：Java 基本数据类型缓存池。”我喝了一口枸杞泡的茶后对三妹说，“考你一个问题哈：<code>new Integer(18) 与 Integer.valueOf(18)</code> 的区别是什么？”</p>\\n<p>“难道不一样吗？”三妹有点诧异。</p>\\n<p>“不一样的。”我笑着说。</p>\\n<ul>\\n<li><code>new Integer(18)</code> 每次都会新建一个对象;</li>\\n<li><code>Integer.valueOf(18)</code> 会使⽤用缓存池中的对象，多次调用只会取同⼀一个对象的引用。</li>\\n</ul>"}');export{e as data};
