const e=JSON.parse('{"key":"v-7bb58bbc","path":"/oo/method.html","title":"Java中的方法：实例方法、静态方法、抽象方法","lang":"zh-CN","frontmatter":{"title":"Java中的方法：实例方法、静态方法、抽象方法","shortTitle":"Java 中的方法","description":"Java程序员进阶之路，小白的零基础Java教程，Java中的方法：实例方法、静态方法、抽象方法","category":["Java 核心"],"tag":["面向对象编程"],"head":[["meta",{"name":"keywords","content":"Java,Java SE,Java基础,Java教程,Java程序员进阶之路,Java入门,教程,方法,实例方法,静态方法,抽象方法,java方法"}],["meta",{"property":"og:url","content":"https://tobebetterjavaer.com/oo/method.html"}],["meta",{"property":"og:site_name","content":"Java程序员进阶之路"}],["meta",{"property":"og:title","content":"Java中的方法：实例方法、静态方法、抽象方法"}],["meta",{"property":"og:description","content":"Java程序员进阶之路，小白的零基础Java教程，Java中的方法：实例方法、静态方法、抽象方法"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-22T04:52:56.000Z"}],["meta",{"property":"article:tag","content":"面向对象编程"}],["meta",{"property":"article:modified_time","content":"2023-02-22T04:52:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中的方法：实例方法、静态方法、抽象方法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-22T04:52:56.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"01、Java 中的方法是什么？","slug":"_01、java-中的方法是什么","link":"#_01、java-中的方法是什么","children":[]},{"level":2,"title":"02、如何声明方法？","slug":"_02、如何声明方法","link":"#_02、如何声明方法","children":[]},{"level":2,"title":"03、方法有哪几种？","slug":"_03、方法有哪几种","link":"#_03、方法有哪几种","children":[{"level":3,"title":"1）预先定义方法","slug":"_1-预先定义方法","link":"#_1-预先定义方法","children":[]},{"level":3,"title":"2）用户自定义方法","slug":"_2-用户自定义方法","link":"#_2-用户自定义方法","children":[]}]},{"level":2,"title":"04、什么是实例方法？","slug":"_04、什么是实例方法","link":"#_04、什么是实例方法","children":[]},{"level":2,"title":"05、什么是静态方法？","slug":"_05、什么是静态方法","link":"#_05、什么是静态方法","children":[]},{"level":2,"title":"06、什么是抽象方法？","slug":"_06、什么是抽象方法","link":"#_06、什么是抽象方法","children":[]},{"level":2,"title":"07、什么是本地 native 方法？","slug":"_07、什么是本地-native-方法","link":"#_07、什么是本地-native-方法","children":[{"level":3,"title":"1、JNI：Java Native Interface","slug":"_1、jni-java-native-interface","link":"#_1、jni-java-native-interface","children":[]},{"level":3,"title":"3、用 C 语言编写程序本地方法","slug":"_3、用-c-语言编写程序本地方法","link":"#_3、用-c-语言编写程序本地方法","children":[]},{"level":3,"title":"4、JNI 调用 C 的流程图","slug":"_4、jni-调用-c-的流程图","link":"#_4、jni-调用-c-的流程图","children":[]},{"level":3,"title":"5、native 关键字","slug":"_5、native-关键字","link":"#_5、native-关键字","children":[]}]}],"git":{"createdTime":1634887330000,"updatedTime":1677041576000,"contributors":[{"name":"itwanger","email":"www.qing_gee@163.com","commits":13},{"name":"沉默王二","email":"www.qing_gee@163.com","commits":2}]},"readingTime":{"minutes":14.52,"words":4355},"filePathRelative":"oo/method.md","localizedDate":"2021年10月22日","excerpt":"<p>“二哥，这一节我们学什么呢？”三妹满是期待的问我。</p>\\n<p>“这一节我们来了解一下 Java 中的方法——什么是方法？如何声明方法？方法有哪几种？什么是实例方法？什么是静态方法？什么是抽象方法？”我笑着对三妹说，“我开始了啊，你要注意力集中啊。”</p>\\n<h2> 01、Java 中的方法是什么？</h2>\\n<p>方法用来实现代码的可重用性，我们编写一次方法，并多次使用它。通过增加或者删除方法中的一部分代码，就可以提高整体代码的可读性。</p>\\n<p>只有方法被调用时，它才会执行。Java 中最有名的方法当属 <code>main()</code> 方法，这是程序的入口。</p>\\n"}');export{e as data};
